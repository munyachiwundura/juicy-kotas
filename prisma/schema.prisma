// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @map(name: "refresh_token")
  access_token       String? @map(name: "access_token")
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @map(name: "id_token")
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  Cart  Cart[]
  Order Order[]
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Product {
  id                Int              @id @default(autoincrement())
  title             String
  image             String
  price             Int
  description       String
  CartProduct       CartProduct[]
  ProductCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int?
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  title     String
  Product   Product[]
  productId Int?
}

model Cart {
  id      Int           @id @default(autoincrement())
  user    User          @relation(fields: [userId], references: [id])
  price   Int
  product CartProduct[]
  userId  String
}

model CartProduct {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int
  Cart      Cart?   @relation(fields: [cartId], references: [id])
  cartId    Int?
  productId Int
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   Int?
}

model Order {
  id       Int           @id @default(autoincrement())
  user     User          @relation(fields: [userId], references: [id])
  products CartProduct[]
  status   String
  date     DateTime      @default(now())
  userId   String
}
